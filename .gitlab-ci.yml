stages:
- lint
- test
- push
- release

flake8:
  stage: lint
  image: python:3.9-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "production"'
    - if: '$CI_COMMIT_BRANCH =~ /^release/'

format:
  stage: lint
  image: python:3.9-alpine
  before_script:
    - pip install black
  script:
    - echo "Linting with black"
    - black --check ./**/*.py
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "production"'
    - if: '$CI_COMMIT_BRANCH =~ /^release/'

.docker-stage:
  image: docker:latest
  tags:
    - docker
  services:
    - docker:dind
  variables:
    IMAGE_NAME_BASE: $CI_REGISTRY_IMAGE/swiss-knife
    IMAGE_NAME: $IMAGE_NAME_BASE:$CI_COMMIT_SHORT_SHA
    DOCKER_TLS_CERTDIR: "/certs"

test:
  stage: test
  extends: .docker-stage
  before_script:
    - apk add --no-cache docker-compose
    - docker-compose -f compose.local.yml config
  script:
    - docker-compose -f compose.local.yml run swiss-knife pytest -vss
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "production"'
    - if: '$CI_COMMIT_BRANCH =~ /^release/'

push:branch:
  stage: push
  extends: .docker-stage
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # replace char "/" to "_"
    - DOCKER_TAG=$(echo $CI_COMMIT_BRANCH | tr "/" "_") 
  script:
    - docker build --target python -f Dockerfile -t $IMAGE_NAME .
    - docker tag $IMAGE_NAME $IMAGE_NAME_BASE:$DOCKER_TAG
    - docker push $IMAGE_NAME
    - docker push $IMAGE_NAME_BASE:$DOCKER_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "production"'
    - if: '$CI_COMMIT_BRANCH =~ /^release/'


push:tag:
  stage: push
  extends: .docker-stage
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --target python -f Dockerfile -t $IMAGE_NAME_BASE:$CI_COMMIT_TAG .
    - docker push $IMAGE_NAME_BASE:$CI_COMMIT_TAG
  rules:
    - if: '$CI_COMMIT_TAG'

release:
  # Caution, as of 2021-02-02 these assets links require a login, see:
  # https://gitlab.com/gitlab-org/gitlab/-/issues/299384
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG



